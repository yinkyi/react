[{"/home/yinin/yyk/project/react/udemy/16-starting-project/src/index.js":"1","/home/yinin/yyk/project/react/udemy/16-starting-project/src/App.js":"2","/home/yinin/yyk/project/react/udemy/16-starting-project/src/components/SimpleInput.js":"3","/home/yinin/yyk/project/react/udemy/16-starting-project/src/hooks/user-input.js":"4","/home/yinin/yyk/project/react/udemy/16-starting-project/src/components/BasicForm.js":"5"},{"size":142,"mtime":1616595887000,"results":"6","hashOfConfig":"7"},{"size":214,"mtime":1648049845656,"results":"8","hashOfConfig":"7"},{"size":2445,"mtime":1648049089946,"results":"9","hashOfConfig":"7"},{"size":1150,"mtime":1648098097515,"results":"10","hashOfConfig":"7"},{"size":3071,"mtime":1648049884708,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"yk3plu",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"14"},"/home/yinin/yyk/project/react/udemy/16-starting-project/src/index.js",[],["27","28"],"/home/yinin/yyk/project/react/udemy/16-starting-project/src/App.js",["29"],"import BasicForm from './components/BasicForm';\nimport SimpleInput from './components/SimpleInput';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","/home/yinin/yyk/project/react/udemy/16-starting-project/src/components/SimpleInput.js",["30","31","32","33","34","35"],"import useInput from '../hooks/user-input';\nconst SimpleInput = (props) => {\n  const validateName = (value)=>{\n    return value.trim() !== \"\"\n  }\n  const validatEmail = (value)=>{\n    return value.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  }\n  const {\n        value:enterName,\n        isValueValid:isNameValid,\n        hasError:nameInputHasError,\n        enterValueBlurHandler:enterNameBlurHandler,\n        enterValueChangeHandler:enterNameChangeHandler,\n        reset:resetName,\n        beforeSubmit:beforesubmitName\n       } = useInput(validateName);\n  const {\n        value:enterEmail,\n        isValueValid:isEmailValid,\n        hasError:emailInputHasError,\n        enterValueBlurHandler:enterEmailBlurHandler,\n        enterValueChangeHandler:enterEmailChangeHandler,\n        reset:resetEmail,\n        beforeSubmit:beforesubmitEmail\n       } = useInput(validatEmail);\n  \n\n\n\n  let formisValid= false;\n  if(isNameValid && isEmailValid){\n    formisValid = true\n  }\n  // useEffect(()=>{\n  //   if(isValidInput){\n  //     console.log(\"input is valid\")\n  //   }\n  // },[inputName])\n\n  const submitFormHandler=(event)=>{\n    event.preventDefault();\n    // beforesubmitName();\n    // beforesubmitEmail();\n    if(!formisValid){\n      return;\n    }\n    \n    resetName();\n    resetEmail();\n  }\n  \n\n  return(\n    <form onSubmit={submitFormHandler}>\n      <div className={!nameInputHasError?'form-control':'form-control invalid'}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n            type='text'\n            id='name' \n            value={enterName} \n            onBlur ={enterNameBlurHandler}\n            onChange={enterNameChangeHandler}/>\n        {nameInputHasError && <p className='error-text'>Name must not be empty</p>}\n      </div>\n      <div className={!emailInputHasError?'form-control':'form-control invalid'}>\n        <label htmlFor='name'>Your Email</label>\n        <input \n            type='email'\n            id='email' \n            value={enterEmail} \n            onBlur ={enterEmailBlurHandler}\n            onChange={enterEmailChangeHandler}/>\n        {emailInputHasError && <p className='error-text'>Email must be valid</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formisValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","/home/yinin/yyk/project/react/udemy/16-starting-project/src/hooks/user-input.js",["36","37","38","39"],"import { act } from '@testing-library/react';\nimport {useReducer} from 'react';\n\nlet initialInputState = {\n    value:'',\n    isTouch:false\n}\nconst inputReducer = (state,action) =>{\n    if(action.type == \"INPUT\"){\n        return {value:action.value,isTouch:state.isTouch};\n    }\n    if(action.type == \"BLUR\"){\n        return {value:state.value,isTouch:true};\n    }\n    if(action.type == \"RESET\"){\n        return {isTouch:false,value:''};\n    }\n    return initialInputState;\n}\nconst useInput = (validateValue)=>{\n    const [inputState,dispatch]=useReducer(inputReducer,initialInputState);\n\n    const isValueValid = validateValue(inputState.value);\n    const hasError = !isValueValid && inputState.isTouch?true:false; \n\n    const enterValueChangeHandler = (event)=>{\n        dispatch({type:'INPUT',value:event.target.value});\n      }\n      const enterValueBlurHandler = (event)=>{\n        dispatch({type:'BLUR',value:true});\n  \n      }\n   \n    const reset = ()=>{\n        dispatch({type:'RESET'});\n    }\n    return{\n        reset,isValueValid,hasError,value:inputState.value,enterValueBlurHandler,enterValueChangeHandler\n    }\n}\nexport default useInput;","/home/yinin/yyk/project/react/udemy/16-starting-project/src/components/BasicForm.js",["40","41","42","43"],"import useInput from \"../hooks/user-input\";\nconst BasicForm = (props) => {\n  const {\n    value:enterFirstName,\n    isValueValid:isFirstNameValid,\n    hasError:firstNameInputHasError,\n    enterValueBlurHandler:enterFirstNameBlurHandler,\n    enterValueChangeHandler:enterFirstNameChangeHandler,\n    reset:resetFirstName,\n   } = useInput((value)=>{return value.trim() !== \"\"});\n   const {\n    value:enterLastName,\n    isValueValid:isLastNameValid,\n    hasError:lastNameInputHasError,\n    enterValueBlurHandler:enterLastNameBlurHandler,\n    enterValueChangeHandler:enterLastNameChangeHandler,\n    reset:resetLastName,\n   } = useInput((value)=>{return value.trim() !== \"\"});\n  const {\n    value:enterEmail,\n    isValueValid:isEmailValid,\n    hasError:emailInputHasError,\n    enterValueBlurHandler:enterEmailBlurHandler,\n    enterValueChangeHandler:enterEmailChangeHandler,\n    reset:resetEmail,\n   } = useInput((value)=>{return value.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)});\n\n   let formisValid = false;\n   if(isLastNameValid && isFirstNameValid && isEmailValid){\n    formisValid = true;\n   }\n   const submitFormHandler=(event)=>{\n    event.preventDefault();\n    // beforesubmitName();\n    // beforesubmitEmail();\n    if(!formisValid){\n      return;\n    }\n    \n    resetFirstName();\n    resetLastName();\n    resetEmail();\n  }\n  return (\n    <form onSubmit={submitFormHandler}>\n      <div className={!firstNameInputHasError?'form-control':'form-control invalid'}>\n        <div className='form-control'>\n          <label htmlFor='name'>First Name</label>\n          <input \n              type='text' \n              id='firstName' \n              value={enterFirstName} \n              onChange={enterFirstNameChangeHandler}\n              onBlur={enterFirstNameBlurHandler}\n          />\n          {firstNameInputHasError && <p className='error-text'>First Name must not be empty</p>}\n        </div>\n        <div className={!lastNameInputHasError?'form-control':'form-control invalid'}>\n          <label htmlFor='name'>Last Name</label>\n          <input \n              type='text' \n              id='lastName' \n              value={enterLastName} \n              onChange={enterLastNameChangeHandler}\n              onBlur={enterLastNameBlurHandler}\n          />\n           {lastNameInputHasError && <p className='error-text'>Last Name must not be empty</p>}\n        </div>\n      </div>\n      <div className={!emailInputHasError?'form-control':'form-control invalid'}>\n        <label htmlFor='name'>E-Mail Address</label>\n        <input \n            type='email'\n            id='email' \n            value={enterEmail} \n            onBlur ={enterEmailBlurHandler}\n            onChange={enterEmailChangeHandler}/>\n        {emailInputHasError && <p className='error-text'>Email must be valid</p>}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formisValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":8,"nodeType":"50","messageId":"51","endLine":2,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":7,"column":46,"nodeType":"54","messageId":"55","endLine":7,"endColumn":47,"suggestions":"56"},{"ruleId":"52","severity":1,"message":"53","line":7,"column":71,"nodeType":"54","messageId":"55","endLine":7,"endColumn":72,"suggestions":"57"},{"ruleId":"52","severity":1,"message":"53","line":7,"column":80,"nodeType":"54","messageId":"55","endLine":7,"endColumn":81,"suggestions":"58"},{"ruleId":"52","severity":1,"message":"53","line":7,"column":84,"nodeType":"54","messageId":"55","endLine":7,"endColumn":85,"suggestions":"59"},{"ruleId":"48","severity":1,"message":"60","line":16,"column":22,"nodeType":"50","messageId":"51","endLine":16,"endColumn":38},{"ruleId":"48","severity":1,"message":"61","line":25,"column":22,"nodeType":"50","messageId":"51","endLine":25,"endColumn":39},{"ruleId":"48","severity":1,"message":"62","line":1,"column":10,"nodeType":"50","messageId":"51","endLine":1,"endColumn":13},{"ruleId":"63","severity":1,"message":"64","line":9,"column":20,"nodeType":"65","messageId":"66","endLine":9,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":12,"column":20,"nodeType":"65","messageId":"66","endLine":12,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":15,"column":20,"nodeType":"65","messageId":"66","endLine":15,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":26,"column":68,"nodeType":"54","messageId":"55","endLine":26,"endColumn":69,"suggestions":"67"},{"ruleId":"52","severity":1,"message":"53","line":26,"column":93,"nodeType":"54","messageId":"55","endLine":26,"endColumn":94,"suggestions":"68"},{"ruleId":"52","severity":1,"message":"53","line":26,"column":102,"nodeType":"54","messageId":"55","endLine":26,"endColumn":103,"suggestions":"69"},{"ruleId":"52","severity":1,"message":"53","line":26,"column":106,"nodeType":"54","messageId":"55","endLine":26,"endColumn":107,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["73","74"],["75","76"],["77","78"],["79","80"],"'beforesubmitName' is assigned a value but never used.","'beforesubmitEmail' is assigned a value but never used.","'act' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["81","82"],["83","84"],["85","86"],["87","88"],"no-global-assign","no-unsafe-negation",{"messageId":"89","fix":"90","desc":"91"},{"messageId":"92","fix":"93","desc":"94"},{"messageId":"89","fix":"95","desc":"91"},{"messageId":"92","fix":"96","desc":"94"},{"messageId":"89","fix":"97","desc":"91"},{"messageId":"92","fix":"98","desc":"94"},{"messageId":"89","fix":"99","desc":"91"},{"messageId":"92","fix":"100","desc":"94"},{"messageId":"89","fix":"101","desc":"91"},{"messageId":"92","fix":"102","desc":"94"},{"messageId":"89","fix":"103","desc":"91"},{"messageId":"92","fix":"104","desc":"94"},{"messageId":"89","fix":"105","desc":"91"},{"messageId":"92","fix":"106","desc":"94"},{"messageId":"89","fix":"107","desc":"91"},{"messageId":"92","fix":"108","desc":"94"},"removeEscape",{"range":"109","text":"110"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"111","text":"112"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"113","text":"110"},{"range":"114","text":"112"},{"range":"115","text":"110"},{"range":"116","text":"112"},{"range":"117","text":"110"},{"range":"118","text":"112"},{"range":"119","text":"110"},{"range":"120","text":"112"},{"range":"121","text":"110"},{"range":"122","text":"112"},{"range":"123","text":"110"},{"range":"124","text":"112"},{"range":"125","text":"110"},{"range":"126","text":"112"},[225,226],"",[225,225],"\\",[250,251],[250,250],[259,260],[259,259],[263,264],[263,263],[957,958],[957,957],[982,983],[982,982],[991,992],[991,991],[995,996],[995,995]]